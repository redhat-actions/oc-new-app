name: OpenShift Pet Clinic Workflow
on: [ push, workflow_dispatch ]

env:
  REGISTRY_USER: diagrawa
  IMAGE_REGISTRY: quay.io
  TEST_NAMESPACE: diagrawa-code
  APP_NAME: petclinic
  APP_PORT: 8080

jobs:
  #####################################################################################################################
  ## The compile job compiles the application into a jar, and uploads it as an artifact for the next job to use.
  compile:
    name: Compile
    runs-on: ubuntu-20.04
    outputs:
      jarname: ${{ steps.get-jarname.outputs.jarname }}
    env:
      TARGET_DIR: target/
      MVN_REPO_DIR: ~/.m2/repository
    steps:
    - uses: actions/checkout@v2
      with:
        repository: spring-projects/spring-petclinic

    # If none of these files has changed, we assume that the contents of .m2/repository can be fetched from the cache.
    - name: Hash Maven files
      run: |
        echo "MVN_HASH=${{ hashFiles('pom.xml', '.mvn/**/*', 'mvnw*') }}" >> $GITHUB_ENV

    # Download the m2 repository from the cache to speed up the build.
    - name: Check for Maven cache
      id: check-mvn-cache
      uses: actions/cache@v2
      with:
        path: ${{ env.MVN_REPO_DIR }}
        key: ${{ env.MVN_HASH }}

    - name: Setup Java
      uses: actions/setup-java@v1
      with:
        java-version: 11

    - run: java -version

    - run: mvn -ntp -B package

    # If there was no cache hit above, store the output into the cache now.
    - name: Save Maven repo into cache
      if: ${{ steps.check-mvn-cache.outputs.cache-hit }} != 'true'
      uses: actions/cache@v2
      with:
        path: ${{ env.MVN_REPO_DIR }}
        key: ${{ env.MVN_HASH }}

    # Store the output jar into the env for reuse below.
    # It will contain, eg. "spring-petclinic-2.3.0.BUILD-SNAPSHOT.jar"
    - name: Get jar filename
      id: get-jarname
      run: |
        export JAR_NAME="$(basename $(ls target/*.jar))"
        echo "Petclinic jar is $JAR_NAME"
        echo "::set-output name=jarname::$JAR_NAME"
        echo "JAR_NAME=$JAR_NAME" >> $GITHUB_ENV

    # Upload the jar for future jobs to use.
    - uses: actions/upload-artifact@v2
      with:
        name: ${{ env.JAR_NAME }}
        path: ${{ env.TARGET_DIR }}/${{ env.JAR_NAME }}
        if-no-files-found: error

  #####################################################################################################################
  ## The build and push image job builds the container image with the petclinic jar in it,
  ## and pushes it to an image registry.
  ## It outputs the image tags and image URL for the next step to use when deploying to the OpenShift cluster.
  build-push-image:
    name: Build and Push to Quay
    runs-on: ubuntu-20.04
    needs: compile
    outputs:
      # image-tag: ${{ steps.set-image-tag.outputs.image-tag }}
      registry-path: ${{ steps.push-to-quay.outputs.registry-path }}
    env:
      JAR_NAME: ${{ needs.compile.outputs.jarname }}
      IMAGE_TAGS: latest ${{ github.sha }}
    steps:
      # Download the jar artifact from the compile step
      - uses: actions/download-artifact@v2
        with:
          name: ${{ env.JAR_NAME }}

      # Use the commit short-sha as the tag for this version of the image.
      - name: Set Image tag
        id: set-image-tag
        run: |
          export IMAGE_TAG="${GITHUB_SHA::7}"
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          echo "::set-output name=image-tag::$IMAGE_TAG"

      # Use buildah to build the application image with the jar inside.
      - name: Build Image
        id: build-image
        uses: redhat-actions/buildah-build@v2
        with:
          image: ${{ env.APP_NAME }}
          tags: ${{ env.IMAGE_TAGS }}
          oci: true
          base-image: docker.io/fabric8/java-alpine-openjdk11-jre
          content: ${{ env.JAR_NAME }}
          entrypoint: |
            java
            -jar
            ${{ env.JAR_NAME }}
          port: ${{ env.APP_PORT }}

      # Push the built image to our image registry so it can be pulled into the OpenShift cluster.
      - name: Push to Quay
        id: push-to-quay
        uses: redhat-actions/push-to-registry@v2
        with:
          image: ${{ env.APP_NAME }}
          tags: ${{ steps.build-image.outputs.tags }}
          registry: ${{ env.IMAGE_REGISTRY }}/${{ env.REGISTRY_USER }}
          username: ${{ env.REGISTRY_USER }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

  #####################################################################################################################
  ## The OpenShift Deploy step deploys the image that was created above into our OpenShift cluster, using helm.
  ## It can then run any integration tests before deleting the resources that were created.
  openshift-deploy:
    name: Deploy on OpenShift
    runs-on: ubuntu-20.04
    needs: build-push-image
    env:
      IMAGE_PATH: ${{ needs.build-push-image.outputs.registry-path }}

    steps:
      - uses: actions/checkout@v2

       # Use the commit short-sha as the suffix of the app_name
      - name: Get commit short-sha
        id: commit-data
        uses: redhat-actions/common/commit-data@v1

      # Log into the OpenShift cluster using the secrets configured in the repository settings.
      # The GitHub Ubuntu runners have oc pre-installed.
      # If you're not using those runners, be sure to check out https://github.com/redhat-actions/oc-installer.
      - name: OpenShift login
        uses: redhat-actions/oc-login@v1
        with:
          openshift_server_url: ${{ secrets.OPENSHIFT_SERVER }}
          openshift_token: ${{ secrets.OPENSHIFT_TOKEN }}
          # openshift_username:
          # openshift_password:
          insecure_skip_tls_verify: true
          namespace: ${{ env.TEST_NAMESPACE }}

      - name: Create and expose app
        id: oc-new-app
        uses: ./
        with:
          app_name: ${{ env.APP_NAME }}-${{ steps.commit-data.outputs.short_sha }}
          port: ${{ env.APP_PORT }}
          image: ${{ env.IMAGE_PATH }}

      # Perform a (very) basic integration test.
      # This step is retried since the time to pull the image and start the pod can vary.
      - name: Test project is running
        id: test-project
        uses: nick-invision/retry@v2.2.0
        with:
          timeout_seconds: 3
          retry_wait_seconds: 10
          max_attempts: 30
          warning_on_retry: false
          # Just check that the root endpoint returns a success status (-f flag).
          command: curl -sSfLi ${{ steps.oc-new-app.outputs.route }}

      - name: Get deployment from selector
        run:
          oc get all --selector=${{ steps.oc-new-app.outputs.selector }}
